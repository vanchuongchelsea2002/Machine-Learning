
import os
import streamlit as st
import pandas as pd
import numpy as np
from scipy.stats import zscore
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import SGDRegressor,LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline
from mpl_toolkits.mplot3d import Axes3D
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score
import joblib
import mlflow
from mlflow.tracking import MlflowClient

def run_LinearRegression_app():

    mlflow_tracking_uri = st.secrets["MLFLOW_TRACKING_URI"]
    mlflow_username = st.secrets["MLFLOW_TRACKING_USERNAME"]
    mlflow_password = st.secrets["MLFLOW_TRACKING_PASSWORD"]
    
    # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
    os.environ["MLFLOW_TRACKING_URI"] = mlflow_tracking_uri
    os.environ["MLFLOW_TRACKING_USERNAME"] = mlflow_username
    os.environ["MLFLOW_TRACKING_PASSWORD"] = mlflow_password
    
    # Thi·∫øt l·∫≠p MLflow (ƒê·∫∑t sau khi mlflow_tracking_uri ƒë√£ c√≥ gi√° tr·ªã)
    mlflow.set_tracking_uri(mlflow_tracking_uri)

    # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng
    os.environ["MLFLOW_TRACKING_URI"] = mlflow_tracking_uri
    os.environ["MLFLOW_TRACKING_USERNAME"] = mlflow_username
    os.environ["MLFLOW_TRACKING_PASSWORD"] = mlflow_password

    # Thi·∫øt l·∫≠p MLflow
    mlflow.set_tracking_uri(mlflow_tracking_uri)


    # Kh·ªüi t·∫°o session_state n·∫øu ch∆∞a c√≥
    if 'data_loaded' not in st.session_state:
        st.session_state.data_loaded = False
    if 'data_processed' not in st.session_state:
        st.session_state.data_processed = False
    if 'data_split' not in st.session_state:
        st.session_state.data_split = False
    if 'models_trained' not in st.session_state:
        st.session_state.models_trained = False
    if 'df' not in st.session_state:
        st.session_state.df = None
    if 'X_train' not in st.session_state:
        st.session_state.X_train = None
    if 'y_train' not in st.session_state:
        st.session_state.y_train = None
    if 'X_val' not in st.session_state:
        st.session_state.X_val = None
    if 'y_val' not in st.session_state:
        st.session_state.y_val = None
    if 'X_test' not in st.session_state:
        st.session_state.X_test = None
    if 'y_test' not in st.session_state:
        st.session_state.y_test = None
    if 'model' not in st.session_state:
        st.session_state.model = None
    if "run_id" not in st.session_state:
        st.session_state["run_id"] = None
    if "run_name" not in st.session_state:
        st.session_state["run_name"] = None

    st.title("D·ª± ƒëo√°n s·ª± s·ªëng v·ªõi t·∫≠p d·ªØ li·ªáu Titanic")

    # T·∫°o c√°c tab
    tabs = st.tabs([
        "T·∫≠p d·ªØ li·ªáu",
        "Th√¥ng tin",
        "Hu·∫•n luy·ªán m√¥ h√¨nh",
        "D·ª± ƒëo√°n",
        "Th√¥ng tin hu·∫•n luy·ªán & MLflow UI"
    ])
    tab_analysis,tab_note, tab_train, tab_predict, tab_mlflow = tabs

    with tab_analysis:
        st.header("Ph√¢n t√≠ch v√† x·ª≠ l√Ω d·ªØ li·ªáu")
        with st.expander("üì• T·∫£i d·ªØ li·ªáu", expanded=True):  
            uploaded_file = st.file_uploader("T·∫£i file CSV (Titanic dataset)", type=["csv"])
            if uploaded_file is not None:
                st.session_state.df = pd.read_csv(uploaded_file)
                st.write("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n:")
                st.write(st.session_state.df.head(10))
                st.session_state.data_loaded = True


        with st.expander("üì• Th√¥ng tin c·ªßa t·∫≠p d·ªØ li·ªáu", expanded=True):
            if st.session_state.get("data_loaded", False):
                st.markdown("""
                    - `PassengerId` : ID c·ªßa h√†nh kh√°ch  
                    - `Survived` : Bi·∫øn m·ª•c ti√™u (0 = Kh√¥ng s·ªëng s√≥t, 1 = S·ªëng s√≥t).  
                    - `Pclass` : H·∫°ng v√© (1, 2, 3).  
                    - `Name` : T√™n h√†nh kh√°ch.  
                    - `Sex` : Gi·ªõi t√≠nh (male, female).  
                    - `Age` : Tu·ªïi  
                    - `SibSp` : S·ªë anh ch·ªã em ho·∫∑c v·ª£/ch·ªìng ƒëi c√πng.  
                    - `Parch` : S·ªë cha m·∫π ho·∫∑c con c√°i ƒëi c√πng.  
                    - `Ticket` : S·ªë v√©.  
                    - `Fare` : Gi√° v√©  
                    - `Cabin` : S·ªë ph√≤ng  
                    - `Embarked` : C·∫£ng l√™n t√†u (C = Cherbourg, Q = Queenstown, S = Southampton).  
                """, unsafe_allow_html=True)    
                

        with st.expander("üîç Ki·ªÉm tra d·ªØ li·ªáu"):
            if st.session_state.get("data_loaded", False):
                
                df = st.session_state.df
                missing_values = df.isnull().sum()                                 
                outlier_count = {
                            col: (abs(zscore(df[col], nan_policy='omit')) > 3).sum()
                            for col in df.select_dtypes(include=['number']).columns
                }
                error_report = pd.DataFrame({
                            'C·ªôt': df.columns,
                            'Gi√° tr·ªã thi·∫øu': missing_values,
                            'Outlier': [outlier_count.get(col, 0) for col in df.columns]
                })

                st.table(error_report)

        with st.expander("‚öôÔ∏è X·ª≠ l√Ω d·ªØ li·ªáu"):
            if st.session_state.get("data_loaded", False):
                df = st.session_state.df
                st.write("**X·ª≠ l√Ω d·ªØ li·ªáu:** Lo·∫°i b·ªè c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt, ƒëi·ªÅn gi√° tr·ªã thi·∫øu, m√£ h√≥a bi·∫øn ph√¢n lo·∫°i, v√† chu·∫©n h√≥a d·ªØ li·ªáu.")
                dropped_cols = st.multiselect("**1Ô∏è‚É£ Ch·ªçn c·ªôt c·∫ßn lo·∫°i b·ªè:**", df.columns.tolist(), default=["PassengerId", "Name", "Ticket", "Cabin"])
                df.drop(columns=dropped_cols, errors='ignore', inplace=True)
                # st.write(f"ƒê√£ lo·∫°i b·ªè c√°c c·ªôt: {', '.join(dropped_cols)}")
                st.write("**2Ô∏è‚É£ ƒêi·ªÅn gi√° tr·ªã thi·∫øu**:")
                missing_cols = df.columns[df.isnull().sum() > 0]  # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ gi√° tr·ªã thi·∫øu
                fill_missing_cols = st.multiselect("Ch·ªçn c·ªôt ƒë·ªÉ ƒëi·ªÅn gi√° tr·ªã thi·∫øu:", missing_cols.tolist())
                for col in fill_missing_cols:
                    if df[col].isnull().sum() > 0:  # Ki·ªÉm tra l·∫°i n·∫øu c·ªôt v·∫´n c√≥ gi√° tr·ªã thi·∫øu
                        method = st.selectbox(f"**Ph∆∞∆°ng ph√°p ƒëi·ªÅn cho c·ªôt** {col}:", 
                                            options=["trung v·ªã (median)", "trung b√¨nh (mean)", "mode", "lo·∫°i b·ªè"], 
                                            key=f"fill_{col}")
                        if df[col].dtype in ['float64', 'int64']:
                            if method == "trung v·ªã (median)":
                                df[col].fillna(df[col].median(), inplace=True)
                            elif method == "trung b√¨nh (mean)":
                                df[col].fillna(df[col].mean(), inplace=True)
                            elif method == "lo·∫°i b·ªè":
                                df.dropna(subset=[col], inplace=True)
                        else:
                            if method == "mode":
                                df[col].fillna(df[col].mode()[0], inplace=True)
                            elif method == "lo·∫°i b·ªè":
                                df.dropna(subset=[col], inplace=True)
                st.write("**3Ô∏è‚É£ M√£ h√≥a c√°c bi·∫øn ph√¢n lo·∫°i**:")
                categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
                cols_to_encode = st.multiselect("Ch·ªçn c·ªôt ƒë·ªÉ m√£ h√≥a:", categorical_cols)
                for col in cols_to_encode:
                    df[col] = df[col].astype('category').cat.codes
                    # st.write(f"ƒê√£ m√£ h√≥a c·ªôt {col}.")
                st.write("4Ô∏è‚É£ Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë:")
                numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
                if "Survived" in numeric_cols:
                    numeric_cols.remove("Survived")
                norm_method = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p chu·∫©n h√≥a:", ["Min-Max Scaling", "Standard Scaling"], key="norm_method")
                if norm_method == "Min-Max Scaling":
                    from sklearn.preprocessing import MinMaxScaler
                    scaler = MinMaxScaler()
                    if st.toggle("Hi·ªÉn th·ªã th√¥ng tin MinMaxScaler"):
                        st.write("Chu·∫©n h√≥a d·ªØ li·ªáu v·ªÅ kho·∫£ng [0,1] ho·∫∑c [-1,1], gi√∫p duy tr√¨ t·ª∑ l·ªá gi·ªØa c√°c gi√° tr·ªã g·ªëc.")

                else:
                    from sklearn.preprocessing import StandardScaler
                    scaler = StandardScaler()
                    if st.toggle("Hi·ªÉn th·ªã th√¥ng tin Standard Scaling"):
                        st.write("Bi·∫øn ƒë·ªïi d·ªØ li·ªáu v·ªÅ trung b√¨nh 0 v√† ƒë·ªô l·ªách chu·∫©n 1, ph√π h·ª£p v·ªõi d·ªØ li·ªáu c√≥ ph√¢n ph·ªëi chu·∫©n.")
                df[numeric_cols] = scaler.fit_transform(df[numeric_cols])
                # st.write(f"ƒê√£ chu·∫©n h√≥a c√°c c·ªôt s·ªë: {', '.join(numeric_cols)}")
                st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!")
                st.write(df.head(10))
                st.session_state.df = df
                st.session_state.data_processed = True
            else:
                st.warning("Vui l√≤ng t·∫£i d·ªØ li·ªáu tr∆∞·ªõc.")

    with tab_note:
    # Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
        option = st.selectbox("Ch·ªçn lo·∫°i h·ªìi quy ", ["H·ªìi quy tuy·∫øn t√≠nh ƒë∆°n", "H·ªìi quy tuy·∫øn t√≠nh b·ªôi", "H·ªìi quy ƒëa th·ª©c"])
        # Gi·∫£i th√≠ch l√Ω thuy·∫øt b·∫±ng st.markdown()
        if option == "H·ªìi quy tuy·∫øn t√≠nh ƒë∆°n":
            st.header("H·ªìi quy tuy·∫øn t√≠nh ƒë∆°n(Simple Linear Regression)")
            st.markdown("---")
            st.markdown("""
            ###  **L√Ω thuy·∫øt**
            - **H·ªìi quy tuy·∫øn t√≠nh ƒë∆°n (Simple Linear Regression)**: 
                - **Simple Linear Regression** l√† m·ªôt k·ªπ thu·∫≠t th·ªëng k√™ v√† h·ªçc m√°y c∆° b·∫£n d√πng ƒë·ªÉ m√¥ h√¨nh h√≥a m·ªëi quan h·ªá tuy·∫øn t√≠nh gi·ªØa m·ªôt bi·∫øn ƒë·ªôc l·∫≠p (X) v√† m·ªôt bi·∫øn ph·ª• thu·ªôc (Y). 
                - ƒê√¢y l√† d·∫°ng ƒë∆°n gi·∫£n nh·∫•t c·ªßa h·ªìi quy tuy·∫øn t√≠nh, v·ªõi m·ª•c ti√™u d·ª± ƒëo√°n gi√° tr·ªã c·ªßa Y d·ª±a tr√™n X th√¥ng qua m·ªôt ƒë∆∞·ªùng th·∫≥ng.
            - **C√¥ng th·ª©c t·ªïng qu√°t**:
            $$
            Y = w_0 + w_1X + \\epsilon
            $$
            **Trong ƒë√≥**:
            - ( Y ): Bi·∫øn ph·ª• thu·ªôc (gi√° tr·ªã c·∫ßn d·ª± ƒëo√°n).
            - ( X ): Bi·∫øn ƒë·ªôc l·∫≠p.
            -  $$( w_0 ) $$: H·ªá s·ªë ch·∫∑n (intercept).
            -  $$( w_1 ) $$: H·ªá s·ªë g√≥c (slope).
            - $$( epsilon )$$: Sai s·ªë ng·∫´u nhi√™n.
            """)
            st.markdown("---")  
            st.markdown("""            
            ### üìä **V√≠ d·ª• ƒë∆°n gi·∫£n**
            Gi·∫£ s·ª≠ b·∫°n mu·ªën d·ª± ƒëo√°n gi√° nh√† (\\( Y \\)) d·ª±a tr√™n di·ªán t√≠ch (\\( X \\)):
            $$
            Y = 50 + 10X
            $$
            - $$( w_0 = 50) $$: Gi√° tr·ªã c∆° b·∫£n (intercept).
            - $$( w_1 = 10) $$: H·ªá s·ªë cho th·∫•y m·ªói ƒë∆°n v·ªã di·ªán t√≠ch tƒÉng th√™m l√†m gi√° nh√† tƒÉng 10 ƒë∆°n v·ªã.
            """)

            st.markdown("### üìä **V√≠ d·ª• minh h·ªça v·ªõi d·ªØ li·ªáu chi·ªÅu cao v√† c√¢n n·∫∑ng**")
            X = np.array([[147], [150], [153], [158], [163], [165], [168], [170], [173], [175], [178], [180], [183]])
            y = np.array([[49], [50], [51], [54], [58], [59], [60], [62], [63], [64], [66], [67], [68]])

            # Th√™m c·ªôt 1 v√†o X ƒë·ªÉ t√≠nh intercept (w_0)
            one = np.ones((X.shape[0], 1))
            Xbar = np.concatenate((one, X), axis=1)

            # T√≠nh to√°n c√°c tr·ªçng s·ªë (weights) c·ªßa ƒë∆∞·ªùng h·ªìi quy
            A = np.dot(Xbar.T, Xbar)
            b = np.dot(Xbar.T, y)
            w = np.dot(np.linalg.pinv(A), b)

            # Chu·∫©n b·ªã ƒë∆∞·ªùng h·ªìi quy
            w_0 = w[0][0]
            w_1 = w[1][0]
            x0 = np.linspace(145, 185, 2)
            y0 = w_0 + w_1 * x0

            # V·∫Ω bi·ªÉu ƒë·ªì
            fig, ax = plt.subplots()
            ax.plot(X.T, y.T, 'ro')  # D·ªØ li·ªáu th·ª±c t·∫ø
            ax.plot(x0, y0, label='ƒê∆∞·ªùng h·ªìi quy')   # ƒê∆∞·ªùng h·ªìi quy
            ax.set_xlim(140, 190)
            ax.set_ylim(45, 75)
            ax.set_xlabel('Chi·ªÅu cao (cm)')
            ax.set_ylabel('C√¢n n·∫∑ng (kg)')
            ax.legend()

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
            st.pyplot(fig)

            # In k·∫øt qu·∫£ w b√™n d∆∞·ªõi bi·ªÉu ƒë·ªì
            st.markdown("**K·∫øt qu·∫£ tr·ªçng s·ªë (weights):**")
            st.write(f"w = [{w_0}, {w_1}]")


                        
            
        elif option == "H·ªìi quy tuy·∫øn t√≠nh b·ªôi":
            st.header(" H·ªìi quy tuy·∫øn t√≠nh b·ªôi (Multiple Linear Regression)")
            st.markdown("---") 
            st.markdown("""
            ###  **L√Ω thuy·∫øt**
            - **H·ªìi quy tuy·∫øn t√≠nh b·ªôi (Multiple Linear Regression)**:
                - **Multiple Linear Regression** l√† m·ªôt k·ªπ thu·∫≠t th·ªëng k√™ v√† h·ªçc m√°y m·ªü r·ªông t·ª´ **Simple Linear Regression**,
                - ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ m√¥ h√¨nh h√≥a m·ªëi quan h·ªá tuy·∫øn t√≠nh gi·ªØa m·ªôt bi·∫øn ph·ª• thu·ªôc (dependent variable) v√† nhi·ªÅu bi·∫øn ƒë·ªôc l·∫≠p (independent variables). 
                - M·ª•c ti√™u l√† d·ª± ƒëo√°n gi√° tr·ªã c·ªßa bi·∫øn ph·ª• thu·ªôc d·ª±a tr√™n s·ª± k·∫øt h·ª£p c·ªßa nhi·ªÅu bi·∫øn ƒë·ªôc l·∫≠p.
            - **C√¥ng th·ª©c t·ªïng qu√°t**:
            $$
            Y = w_0 + w_1X_1 + w_2X_2 + ... + w_nX_n + \\epsilon
            $$
            **Trong ƒë√≥:**   
            - ( Y ): Bi·∫øn ph·ª• thu·ªôc (gi√° tr·ªã c·∫ßn d·ª± ƒëo√°n, v√≠ d·ª•: gi√° nh√†).
            - $$( X_1, X_2, ..., X_n)$$: C√°c bi·∫øn ƒë·ªôc l·∫≠p (v√≠ d·ª•: di·ªán t√≠ch, s·ªë ph√≤ng).
            - $$( w_0 )$$: H·ªá s·ªë ch·∫∑n (intercept).
            - $$( w_1, w_2, ..., w_n )$$: C√°c h·ªá s·ªë h·ªìi quy (weights).
            - $$(epsilon)$$: Sai s·ªë ng·∫´u nhi√™n.
            """)
            
            st.markdown("---") 
            st.markdown("### üìä **V√≠ d·ª• minh h·ªça: D·ª± ƒëo√°n gi√° nh√†**")
            st.markdown("""
            **D·ªØ li·ªáu m·∫´u:**
            - Di·ªán t√≠ch ($$X_1$$ (m¬≤)): 
                - [40, 50, 60, 70, 80, 90]
            - S·ªë ph√≤ng $$(X_2)$$: 
                - [1, 2, 3, 4, 5, 6]
            - Gi√° nh√† (Y, tri·ªáu VNƒê): 
                - [150, 200, 250, 300, 350, 400]
            """)

            # D·ªØ li·ªáu m·∫´u
            X1 = np.array([[40],[50], [60], [70], [80], [90]])  # Di·ªán t√≠ch
            X2 = np.array([[1],[2], [3], [4], [5], [6]])     # S·ªë ph√≤ng
            Y = np.array([[150],[200], [250], [300], [350], [400]])  # Gi√° nh√†

            # K·∫øt h·ª£p c√°c bi·∫øn ƒë·ªôc l·∫≠p th√†nh ma tr·∫≠n
            one = np.ones((X1.shape[0], 1))  # C·ªôt 1 cho intercept
            Xbar = np.concatenate((one, X1, X2), axis=1)  # Ma tr·∫≠n [1, X1, X2]

            # T√≠nh to√°n c√°c tr·ªçng s·ªë (weights)
            A = np.dot(Xbar.T, Xbar)
            b = np.dot(Xbar.T, Y)
            w = np.dot(np.linalg.pinv(A), b)

            # Tr√≠ch xu·∫•t w_0, w_1, w_2
            w_0 = w[0][0]
            w_1 = w[1][0]
            w_2 = w[2][0]

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì 3D
            X1_grid, X2_grid = np.meshgrid(np.linspace(40, 90, 10), np.linspace(1, 6, 10))
            Y_pred = w_0 + w_1 * X1_grid + w_2 * X2_grid

            # V·∫Ω bi·ªÉu ƒë·ªì 3D
            fig = plt.figure(figsize=(10, 8))
            ax = fig.add_subplot(111, projection='3d')
            ax.scatter(X1, X2, Y, c='r', marker='o', label='D·ªØ li·ªáu th·ª±c t·∫ø')
            ax.plot_surface(X1_grid, X2_grid, Y_pred, alpha=0.5, cmap='viridis', label='M·∫∑t ph·∫≥ng h·ªìi quy')
            ax.set_xlabel('Di·ªán t√≠ch (m¬≤)')
            ax.set_ylabel('S·ªë ph√≤ng')
            ax.set_zlabel('Gi√° nh√† (tri·ªáu VNƒê)')
            ax.legend()

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
            st.pyplot(fig)

            # In k·∫øt qu·∫£ w
            st.markdown("**K·∫øt qu·∫£ tr·ªçng s·ªë (weights):**")
            st.write(f"w = [{w_0:.4f}, {w_1:.4f}, {w_2:.4f}]")
            st.markdown("""
            - $$( w_0 )$$: H·ªá s·ªë ch·∫∑n (intercept).
            - $$( w_1 )$$: H·ªá s·ªë cho bi·∫øn di·ªán t√≠ch $$(X_1)$$.
            - $$( w_2 )$$: H·ªá s·ªë cho bi·∫øn s·ªë ph√≤ng $$(X_2)$$.
            """)

            
            st.markdown("### üìä **V√≠ d·ª•: D·ª± ƒëo√°n ƒëi·ªÉm s·ªë h·ªçc t·∫≠p**")
            st.markdown("""
            **D·ªØ li·ªáu m·∫´u:**
            - S·ªë gi·ªù h·ªçc m·ªói ng√†y $$(X_1)$$: 
                - [1, 2, 3, 4, 5, 6, 7, 8]
            - S·ªë gi·ªù ng·ªß m·ªói ƒë√™m $$(X_2)$$: 
                - [5.0, 5.5, 6.0, 6.5, 7.0, 8.0, 8.5, 9.0]
            - ƒêi·ªÉm s·ªë trung b√¨nh (Y): 
                - [ 65, 70, 75, 80, 85, 90, 95, 100]
            """)

            # D·ªØ li·ªáu m·∫´u
            X1 = np.array([[1], [2], [3], [4], [5], [6], [7], [8]])  # S·ªë gi·ªù h·ªçc
            X2 = np.array([[5.0], [5.5], [6.0], [6.5], [7.0], [8.0], [8.5], [9.0]])  # S·ªë gi·ªù ng·ªß
            Y = np.array([[65], [70], [75], [80], [85], [90], [95], [100]])  # ƒêi·ªÉm s·ªë

            # K·∫øt h·ª£p c√°c bi·∫øn ƒë·ªôc l·∫≠p th√†nh ma tr·∫≠n
            one = np.ones((X1.shape[0], 1))  # C·ªôt 1 cho intercept
            Xbar = np.concatenate((one, X1, X2), axis=1)  # Ma tr·∫≠n [1, X1, X2]

            # T√≠nh to√°n c√°c tr·ªçng s·ªë (weights)
            A = np.dot(Xbar.T, Xbar)
            b = np.dot(Xbar.T, Y)
            w = np.dot(np.linalg.pinv(A), b)

            # Tr√≠ch xu·∫•t w_0, w_1, w_2
            w_0 = w[0][0]
            w_1 = w[1][0]
            w_2 = w[2][0]

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì 3D
            X1_grid, X2_grid = np.meshgrid(np.linspace(1, 6, 10), np.linspace(5, 9, 10))
            Y_pred = w_0 + w_1 * X1_grid + w_2 * X2_grid

            # V·∫Ω bi·ªÉu ƒë·ªì 3D
            fig = plt.figure(figsize=(10, 8))
            ax = fig.add_subplot(111, projection='3d')
            ax.scatter(X1, X2, Y, c='r', marker='o', label='D·ªØ li·ªáu th·ª±c t·∫ø')
            ax.plot_surface(X1_grid, X2_grid, Y_pred, alpha=0.5, cmap='viridis', label='M·∫∑t ph·∫≥ng h·ªìi quy')
            ax.set_xlabel('S·ªë gi·ªù h·ªçc m·ªói ng√†y')
            ax.set_ylabel('S·ªë gi·ªù ng·ªß m·ªói ƒë√™m')
            ax.set_zlabel('ƒêi·ªÉm s·ªë trung b√¨nh')
            ax.legend()

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
            st.pyplot(fig)

            # In k·∫øt qu·∫£ w
            st.markdown("**K·∫øt qu·∫£ tr·ªçng s·ªë (weights):**")
            st.write(f"w = [{w_0:.4f}, {w_1:.4f}, {w_2:.4f}]")
            st.markdown("""
            -  $$( w_0 ) $$: H·ªá s·ªë ch·∫∑n (intercept).
            -  $$( w_1 ) $$: H·ªá s·ªë cho s·ªë gi·ªù h·ªçc  $$(X_1) $$.
            -  $$( w_2 ) $$: H·ªá s·ªë cho s·ªë gi·ªù ng·ªß  $$(X_2) $$.
            """)



        elif option == "H·ªìi quy ƒëa th·ª©c":
            st.header("H·ªìi quy ƒëa th·ª©c (Polynomial Regression)")
            st.markdown("---") 
            st.markdown("""
            ### **L√Ω thuy·∫øt**
            - **H·ªìi quy ƒëa th·ª©c (Polynomial Regression)n**:
                - **Polynomial Regression** l√† m·ªôt k·ªπ thu·∫≠t h·ªìi quy m·ªü r·ªông t·ª´ **Linear Regression.**
                - ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ m√¥ h√¨nh h√≥a m·ªëi quan h·ªá phi tuy·∫øn t√≠nh gi·ªØa m·ªôt ho·∫∑c nhi·ªÅu bi·∫øn ƒë·ªôc l·∫≠p (X) v√† m·ªôt bi·∫øn ph·ª• thu·ªôc (Y) th√¥ng qua m·ªôt h√†m ƒëa th·ª©c (polynomial). 
                - M·∫∑c d√π quan h·ªá gi·ªØa ùëã v√† Y l√† phi tuy·∫øn, m√¥ h√¨nh v·∫´n tuy·∫øn t√≠nh v·ªõi c√°c tham s·ªë (coefficients), do ƒë√≥ ƒë∆∞·ª£c g·ªçi l√† "h·ªìi quy tuy·∫øn t√≠nh ƒëa th·ª©c."
            - **C√¥ng th·ª©c**:
            $$
            Y = w_0 + w_1X + w_2X^2 + ... + w_nX^n + \\epsilon
            $$
            **Trong ƒë√≥:**
            - $$( Y )$$: Bi·∫øn ph·ª• thu·ªôc (gi√° tr·ªã c·∫ßn d·ª± ƒëo√°n).
            - $$( X )$$: Bi·∫øn ƒë·ªôc l·∫≠p.
            - $$( w_0, w_1, ..., w_n )$$: H·ªá s·ªë h·ªìi quy.
            - $$( n )$$: B·∫≠c c·ªßa ƒëa th·ª©c.
            - $$( epsilon )$$: Sai s·ªë ng·∫´u nhi√™n.
            """)
            st.markdown("---") 
            st.markdown("### üìä **V√≠ d·ª•: D·ª± ƒëo√°n t·ªëc ƒë·ªô xe**")
            st.markdown("""
            **D·ªØ li·ªáu m·∫´u:**
            - Th·ªùi gian (X, gi√¢y): [0, 2, 4, 6, 8, 10]
            - T·ªëc ƒë·ªô (Y, km/h): [0, 20, 40, 60, 80]
            """)

            # D·ªØ li·ªáu m·∫´u
            X = np.array([0, 2, 4, 6, 8]).reshape(-1, 1)  # Th·ªùi gian (reshape ƒë·ªÉ th√†nh 2D)
            Y = np.array([0, 20, 60, 80, 70])  # T·ªëc ƒë·ªô

            # T·∫°o c√°c ƒë·∫∑c tr∆∞ng ƒëa th·ª©c (b·∫≠c 2)
            poly = PolynomialFeatures(degree=2)
            X_poly = poly.fit_transform(X)

            # Hu·∫•n luy·ªán m√¥ h√¨nh Linear Regression tr√™n d·ªØ li·ªáu ƒëa th·ª©c
            model = LinearRegression()
            model.fit(X_poly, Y)

            # L·∫•y c√°c h·ªá s·ªë
            w_0 = model.intercept_  # H·ªá s·ªë ch·∫∑n
            w = model.coef_  # H·ªá s·ªë (w_1, w_2, ...)
            w_1, w_2 = w[1], w[2]  # Tr√≠ch xu·∫•t w_1 v√† w_2 (b·∫≠c 2)

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ v·∫Ω
            X_smooth = np.linspace(0, 10, 100).reshape(-1, 1)
            X_poly_smooth = poly.transform(X_smooth)
            Y_pred = model.predict(X_poly_smooth)

            # V·∫Ω bi·ªÉu ƒë·ªì
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.scatter(X, Y, color='red', label='D·ªØ li·ªáu th·ª±c t·∫ø')
            ax.plot(X_smooth, Y_pred, color='blue', label='ƒê∆∞·ªùng cong ƒëa th·ª©c (b·∫≠c 2)')
            ax.set_xlabel('Th·ªùi gian (gi√¢y)')
            ax.set_ylabel('T·ªëc ƒë·ªô (km/h)')
            ax.set_title('Polynomial Regression: T·ªëc ƒë·ªô xe theo th·ªùi gian')
            ax.legend()

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
            st.pyplot(fig)

            # In k·∫øt qu·∫£ w
            st.markdown("**K·∫øt qu·∫£ tr·ªçng s·ªë (weights):**")
            st.write(f"w_0 = {w_0:.4f}, w_1 = {w_1:.4f}, w_2 = {w_2:.4f}")
            st.markdown("""
            - $$( w_0 )$$: H·ªá s·ªë ch·∫∑n.
            - $$( w_1 )$$: H·ªá s·ªë cho $$( X )$$.
            - $$( w_2 )$$: H·ªá s·ªë cho $$( X^2 )$$.
            """)

         # ---------------- Hu·∫•n luy·ªán & Ki·ªÉm th·ª≠ m√¥ h√¨nh ----------------
    with tab_train:
        st.header("Hu·∫•n luy·ªán & Ki·ªÉm th·ª≠ m√¥ h√¨nh")
        with st.expander("üìä Chia d·ªØ li·ªáu"):
            if st.session_state.get("data_processed", False):
                df = st.session_state.df.copy()
                if "Survived" not in df.columns:
                    st.error("Kh√¥ng t√¨m th·∫•y c·ªôt m·ª•c ti√™u 'Survived'.")
                else:
                    st.write("**Nh·∫≠p t·ª∑ l·ªá chia t·∫≠p d·ªØ li·ªáu:**")
                    with mlflow.start_run():
                        test_pct = st.slider("Ch·ªçn % t·ª∑ l·ªá t·∫≠p test", 0, 50, 15)
                        valid_pct = st.slider("Ch·ªçn % t·ª∑ l·ªá t·∫≠p validation (trong ph·∫ßn train)", 0, 50, 15)
                        train_pct = 100 - (test_pct + valid_pct)
                        total = test_pct + valid_pct + train_pct
                        st.markdown(f"""
                        T·ª∑ l·ªá ph√¢n chia bao g·ªìm:
                        - **Train:** {train_pct}%  
                        - **Test:** {test_pct}%  
                        - **Validation:** {valid_pct}%  
                        """)
                        if total != 100:
                            st.warning("T·ªïng c√°c t·ªâ l·ªá ph·∫£i b·∫±ng 100%! Vui l√≤ng ƒëi·ªÅu ch·ªânh l·∫°i c√°c gi√° tr·ªã.")
                        else:
                            if train_pct < 30:
                                st.warning("T·ªâ l·ªá t·∫≠p Train qu√° th·∫•p (<30%).")
                            if test_pct < 5:
                                st.warning("T·ªâ l·ªá t·∫≠p Test qu√° th·∫•p (<5%).")
                            if valid_pct < 5:
                                st.warning("T·ªâ l·ªá t·∫≠p Validation qu√° th·∫•p (<5%).")
                            X = df.drop(columns=["Survived"])
                            y = df["Survived"]  
                            X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=test_pct/100, random_state=42)
                            valid_size = valid_pct / (valid_pct + train_pct) if (valid_pct + train_pct) > 0 else 0
                            X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=valid_size, random_state=42)
                            st.markdown(f"""
                            S·ªë l∆∞·ª£ng m·∫´u sau khi chia:
                            - **Train:** {X_train.shape[0]} m·∫´u  
                            - **Validation:** {X_val.shape[0]} m·∫´u  
                            - **Test:** {X_test.shape[0]} m·∫´u  
                            """)
                    mlflow.end_run()
                    min_samples = 10
                    if X_train.shape[0] < min_samples:
                        st.warning("S·ªë m·∫´u t·∫≠p Train qu√° √≠t.")
                    if X_val.shape[0] < min_samples:
                        st.warning("S·ªë m·∫´u t·∫≠p Validation qu√° √≠t.")
                    if X_test.shape[0] < min_samples:
                        st.warning("S·ªë m·∫´u t·∫≠p Test qu√° √≠t.")
                    st.session_state.X_train = X_train
                    st.session_state.y_train = y_train
                    st.session_state.X_val = X_val
                    st.session_state.y_val = y_val
                    st.session_state.X_test = X_test
                    st.session_state.y_test = y_test
                    st.session_state.data_split = True
            else:
                st.warning("Vui l√≤ng x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc.")


        with st.expander("Hu·∫•n luy·ªán m√¥ h√¨nh"):   
        #<--------------------------------Test---------------------------->
            if st.session_state.get("data_split", False):
                # 1) Ch·ªçn m√¥ h√¨nh
                col_model, col_model_tip = st.columns([0.8, 0.2])
                with col_model:
                    model_choice_to_train = st.selectbox("Ch·ªçn m√¥ h√¨nh ƒë·ªÉ hu·∫•n luy·ªán:", 
                                                        ["H·ªìi quy ƒëa bi·∫øn (Multiple Regression) ", "H·ªìi quy ƒëa th·ª©c (Polynomial Regression) "])
            
                col_lr, col_lr_tip = st.columns([0.8, 0.2])
                with col_lr:
                    lr_method = "constant"  # G√°n c·ªë ƒë·ªãnh gi√° tr·ªã "constant"

                col_eta, col_eta_tip = st.columns([0.8, 0.2])
                with col_eta:
                    eta0 = st.number_input("Ch·ªçn t·ªëc ƒë·ªô h·ªçc (learning rate):", 
                            value=0.01, min_value=0.0001, max_value=1.0, 
                            step=0.0001, format="%.4f")
                poly_degree = 1
                if model_choice_to_train == "H·ªìi quy ƒêa th·ª©c":
                    col_poly, col_poly_tip = st.columns([0.8, 0.2])
                    with col_poly:
                        poly_degree = st.number_input("Ch·ªçn b·∫≠c c·ªßa ƒëa th·ª©c:", 
                                                    min_value=1, max_value=10, value=2)
                col_fold, col_fold_tip = st.columns([0.8, 0.2])
                with col_fold:
                    num_folds = st.number_input("Ch·ªçn s·ªë folds (KFold Cross-Validation):", 
                                                min_value=2, max_value=20, value=5, step=1)
                if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
                    X_train = st.session_state.X_train
                    y_train = st.session_state.y_train
                    X_val = st.session_state.X_val
                    y_val = st.session_state.y_val
                    X_test = st.session_state.X_test
                    y_test = st.session_state.y_test
                    with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi Cross Validation..."):
                        # T·ª± ƒë·ªông t·∫°o run_name
                        run_name = f"{model_choice_to_train}_Run_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}"
                        with mlflow.start_run(run_name=run_name) as run:
                            # Tham s·ªë c·ªë ƒë·ªãnh c·ªßa m√¥ h√¨nh
                            max_iter = 1000
                            tol = 1e-3
                            
                            # C·∫≠p nh·∫≠t c√°c tham s·ªë quan tr·ªçng v√†o dictionary
                            params = {
                                "model_choice": model_choice_to_train,
                                "learning_rate_method": lr_method,
                                "max_iter": max_iter,
                                "num_folds": num_folds,
                                "train_samples": X_train.shape[0],
                                "validation_samples": X_val.shape[0],
                                "test_samples": X_test.shape[0]
                            }
                            if lr_method == "constant" and eta0 is not None:
                                params["eta0"] = eta0
                            else:
                                params["eta0"] = "N/A"

                            if model_choice_to_train == "H·ªìi quy ƒêa th·ª©c":
                                params["poly_degree"] = poly_degree

                            # Log c√°c tham s·ªë quan tr·ªçng
                            for key, value in params.items():
                                mlflow.log_param(key, value)

                            # Kh·ªüi t·∫°o m√¥ h√¨nh
                            if model_choice_to_train == "H·ªìi quy ƒêa bi·∫øn":
                                if lr_method == "constant" and eta0 is not None:
                                    model = SGDRegressor(learning_rate=lr_method, eta0=eta0, max_iter=max_iter, tol=tol)
                                else:
                                    model = SGDRegressor(learning_rate=lr_method, max_iter=max_iter, tol=tol)
                            else:
                                if lr_method == "constant" and eta0 is not None:
                                    model = Pipeline([
                                        ('poly', PolynomialFeatures(degree=poly_degree)),
                                        ('sgd', SGDRegressor(learning_rate=lr_method, eta0=eta0, max_iter=max_iter, tol=tol))
                                    ])
                                else:
                                    model = Pipeline([
                                        ('poly', PolynomialFeatures(degree=poly_degree)),
                                        ('sgd', SGDRegressor(learning_rate=lr_method, max_iter=max_iter, tol=tol))
                                    ])

                            # Cross Validation
                            cv_scores = cross_val_score(model, X_train, y_train, cv=num_folds, scoring='r2')
                            # Log th√™m c√°c ch·ªâ s·ªë ph·ª• quan tr·ªçng t·ª´ CV
                            mlflow.log_metric("mean_cv_score", np.mean(cv_scores))
                            mlflow.log_metric("cv_scores_std", np.std(cv_scores))
                            mlflow.log_metric("max_cv_score", np.max(cv_scores))
                            
                            model.fit(X_train, y_train)
                            # D·ª± ƒëo√°n tr√™n t·∫≠p Validation
                            y_pred_val = model.predict(X_val)
                            mse_val = mean_squared_error(y_val, y_pred_val)
                            r2_val = r2_score(y_val, y_pred_val)
                            y_pred_val_class = [1 if pred >= 0.5 else 0 for pred in y_pred_val]
                            accuracy_val = accuracy_score(y_val, y_pred_val_class)
                            # D·ª± ƒëo√°n tr√™n t·∫≠p Test
                            y_pred_test = model.predict(X_test)
                            mse_test = mean_squared_error(y_test, y_pred_test)
                            r2_test = r2_score(y_test, y_pred_test)
                            y_pred_test_class = [1 if pred >= 0.5 else 0 for pred in y_pred_test]
                            accuracy_test = accuracy_score(y_test, y_pred_test_class)

                            # Log c√°c ch·ªâ s·ªë ƒë√°nh gi√°
                            mlflow.log_metric("validation_mse", mse_val)
                            mlflow.log_metric("validation_r2", r2_val)
                            mlflow.log_metric("validation_accuracy", accuracy_val)
                            mlflow.log_metric("test_mse", mse_test)
                            mlflow.log_metric("test_r2", r2_test)
                            mlflow.log_metric("test_accuracy", accuracy_test)
                            mlflow.sklearn.log_model(model, "model")

                            # L∆∞u th√¥ng tin v√†o session_state
                            st.session_state["run_id"] = run.info.run_id
                            st.session_state["run_name"] = run_name
                            st.session_state["accuracy_val"] = accuracy_val
                            st.session_state["accuracy_test"] = accuracy_test
                            st.session_state["params"] = params
                            st.session_state["model"] = model
                            st.session_state["models_trained"] = True
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        results_df = pd.DataFrame({
                        "Metric": ["Cross Validation Scores (R¬≤)", "Mean CV Score (R¬≤)", "Validation MSE", "Validation R¬≤", "Validation Accuracy", "Test MSE", "Test R¬≤", "Test Accuracy"],
                        "Value": [
                            ', '.join([f"{score:.2e}" for score in cv_scores]),  # Chu·ªói c√°c gi√° tr·ªã R¬≤
                            f"{np.mean(cv_scores):.2e}",
                            f"{mse_val:.2e}",
                            f"{r2_val:.2e}",
                            f"{accuracy_val:.2%}",
                            f"{mse_test:.2e}",
                            f"{r2_test:.2e}",
                            f"{accuracy_test:.2%}"
                        ]
                        })
                        # Hi·ªÉn th·ªã b·∫£ng
                        st.markdown("### üìä K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh")
                        st.table(results_df)


                        st.markdown("---") 
                        # Gi·∫£i th√≠ch k·∫øt qu·∫£ ng·∫Øn g·ªçn h∆°n
                        st.markdown("### ‚ÑπÔ∏è Gi·∫£i th√≠ch k·∫øt qu·∫£")
                        st.markdown("""
                        - **Cross Validation Scores (R¬≤):** ƒê√°nh gi√° hi·ªáu su·∫•t m√¥ h√¨nh tr√™n t·ª´ng t·∫≠p hu·∫•n luy·ªán (fold).  
                        - **Mean CV Score (R¬≤):** Trung b√¨nh R¬≤ c·ªßa c√°c fold, gi√° tr·ªã c√†ng g·∫ßn 1 c√†ng t·ªët.  
                        - **MSE (Mean Squared Error):** Sai s·ªë b√¨nh ph∆∞∆°ng trung b√¨nh, c√†ng nh·ªè c√†ng t·ªët.  
                        - **R¬≤ (R-squared):** ƒêo l∆∞·ªùng ƒë·ªô ph√π h·ª£p c·ªßa m√¥ h√¨nh, g·∫ßn 1 l√† t·ªët.  
                        - **Accuracy (ng∆∞·ª°ng 0.5):** T·ª∑ l·ªá d·ª± ƒëo√°n ƒë√∫ng khi √°p d·ª•ng ng∆∞·ª°ng 0.5.  
                        """)
                        
                        metrics = ["Mean CV Score (R¬≤)", "Validation MSE", "Validation R¬≤", "Validation Accuracy", "Test MSE", "Test R¬≤", "Test Accuracy"]
                        values = [np.mean(cv_scores), mse_val, r2_val, accuracy_val, mse_test, r2_test, accuracy_test]

                        # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt cho c√°c ch·ªâ s·ªë ch√≠nh
                        # st.markdown("### üìä **Bi·ªÉu ƒë·ªì so s√°nh c√°c ch·ªâ s·ªë ch√≠nh**")

                        # fig, ax = plt.subplots(figsize=(8, 5))
                        # sns.barplot(x=values, y=metrics, ax=ax, palette="coolwarm")

                        # # G√°n nh√£n gi√° tr·ªã l√™n c·ªôt
                        # for i, v in enumerate(values):
                        #     ax.text(v, i, f"{v:.2e}", color='black', va='center')

                        # ax.set_xlabel("Gi√° tr·ªã")
                        # ax.set_ylabel("Ch·ªâ s·ªë")
                        # ax.set_title("So s√°nh c√°c ch·ªâ s·ªë ch√≠nh")

                        # st.pyplot(fig)

                        # # V·∫Ω bi·ªÉu ƒë·ªì line cho Cross Validation Scores (R¬≤)
                        # st.markdown("### üìâ **Bi·ªÉu ƒë·ªì Cross Validation Scores (R¬≤)**")

                        # fig, ax = plt.subplots(figsize=(8, 4))
                        # sns.lineplot(x=range(len(cv_scores)), y=cv_scores, marker='o', ax=ax, color='blue')
                        # ax.axhline(np.mean(cv_scores), linestyle="--", color="red", label="Mean R¬≤")  # ƒê∆∞·ªùng trung b√¨nh

                        # ax.set_xlabel("Fold")
                        # ax.set_ylabel("R¬≤ Score")
                        # ax.set_title("Cross Validation Scores (R¬≤)")
                        # ax.legend()

                        # st.pyplot(fig)
            else:
                st.warning("Vui l√≤ng chia t·∫≠p d·ªØ li·ªáu tr∆∞·ªõc.")

    # ---------------- Tab 4: D·ª± ƒëo√°n ----------------
    with tab_predict:
        st.header("Demo D·ª± ƒëo√°n")
        if st.session_state.get("models_trained", False):
            st.write("Nh·∫≠p th√¥ng tin h√†nh kh√°ch:")
            df = st.session_state.df
            features = df.drop(columns=["Survived"]).columns.tolist()
            input_values = []
            for feature in features:
                if np.issubdtype(df[feature].dtype, np.number):
                    default_value = abs(float(df[feature].median()))
                    value = st.number_input(f"{feature}:", value=default_value)
                else:
                    options = list(sorted(df[feature].unique()))
                    value = st.selectbox(f"{feature}:", options)
                input_values.append(value)
            if st.button("D·ª± ƒëo√°n"):
                input_array = np.array(input_values).reshape(1, -1)
                prediction = st.session_state.model.predict(input_array)[0]
                result = "S·ªëng" if prediction >= 0.5 else "Kh√¥ng s·ªëng"
                st.write(f"**D·ª± ƒëo√°n:** {result}")
        else:
            st.warning("Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")

   
    # ---------------- Tab 5: Th√¥ng tin hu·∫•n luy·ªán & MLflow UI ----------------
    with tab_mlflow:
        st.header("Th√¥ng tin Hu·∫•n luy·ªán & MLflow UI")
        try:
            client = MlflowClient()
            experiment_name = "LinearRegression"
    
            # Ki·ªÉm tra n·∫øu experiment ƒë√£ t·ªìn t·∫°i
            experiment = client.get_experiment_by_name(experiment_name)
            if experiment is None:
                experiment_id = client.create_experiment(experiment_name)
                st.success(f"Experiment m·ªõi ƒë∆∞·ª£c t·∫°o v·ªõi ID: {experiment_id}")
            else:
                experiment_id = experiment.experiment_id
                st.info(f"ƒêang s·ª≠ d·ª•ng experiment ID: {experiment_id}")
    
            mlflow.set_experiment(experiment_name)
    
            # Truy v·∫•n c√°c run trong experiment
            runs = client.search_runs(experiment_ids=[experiment_id])
    
            # 1) Ch·ªçn v√† ƒë·ªïi t√™n Run Name
            st.subheader("ƒê·ªïi t√™n Run")
            if runs:
                run_options = {run.info.run_id: f"{run.data.tags.get('mlflow.runName', 'Unnamed')} - {run.info.run_id}"
                               for run in runs}
                selected_run_id_for_rename = st.selectbox("Ch·ªçn Run ƒë·ªÉ ƒë·ªïi t√™n:", 
                                                          options=list(run_options.keys()), 
                                                          format_func=lambda x: run_options[x])
                new_run_name = st.text_input("Nh·∫≠p t√™n m·ªõi cho Run:", 
                                             value=run_options[selected_run_id_for_rename].split(" - ")[0])
                if st.button("C·∫≠p nh·∫≠t t√™n Run"):
                    if new_run_name.strip():
                        client.set_tag(selected_run_id_for_rename, "mlflow.runName", new_run_name.strip())
                        st.success(f"ƒê√£ c·∫≠p nh·∫≠t t√™n Run th√†nh: {new_run_name.strip()}")
                    else:
                        st.warning("Vui l√≤ng nh·∫≠p t√™n m·ªõi cho Run.")
            else:
                st.info("Ch∆∞a c√≥ Run n√†o ƒë∆∞·ª£c log.")
    
            # 2) X√≥a Run
            st.subheader("Danh s√°ch Run")
            if runs:
                selected_run_id_to_delete = st.selectbox("", 
                                                         options=list(run_options.keys()), 
                                                         format_func=lambda x: run_options[x])
                if st.button("X√≥a Run", key="delete_run"):
                    client.delete_run(selected_run_id_to_delete)
                    st.success(f"ƒê√£ x√≥a Run {run_options[selected_run_id_to_delete]} th√†nh c√¥ng!")
                    st.experimental_rerun()  # T·ª± ƒë·ªông l√†m m·ªõi giao di·ªán
            else:
                st.info("Ch∆∞a c√≥ Run n√†o ƒë·ªÉ x√≥a.")
    
            # 3) Danh s√°ch c√°c th√≠ nghi·ªám
            st.subheader("Danh s√°ch c√°c Run ƒë√£ log")
            if runs:
                selected_run_id = st.selectbox("Ch·ªçn Run ƒë·ªÉ xem chi ti·∫øt:", 
                                               options=list(run_options.keys()), 
                                               format_func=lambda x: run_options[x])
    
                # 4) Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa Run ƒë∆∞·ª£c ch·ªçn
                selected_run = client.get_run(selected_run_id)
                st.write(f"**Run ID:** {selected_run_id}")
                st.write(f"**Run Name:** {selected_run.data.tags.get('mlflow.runName', 'Unnamed')}")
    
                st.markdown("### Tham s·ªë ƒë√£ log")
                st.json(selected_run.data.params)
    
                st.markdown("### Ch·ªâ s·ªë ƒë√£ log")
                metrics = {
                    "Mean CV Score (R¬≤)": selected_run.data.metrics.get("mean_cv_score", "N/A"),
                    "Validation MSE": selected_run.data.metrics.get("validation_mse", "N/A"),
                    "Validation R¬≤": selected_run.data.metrics.get("validation_r2", "N/A"),
                    "Validation Accuracy": selected_run.data.metrics.get("validation_accuracy", "N/A"),
                    "Test MSE": selected_run.data.metrics.get("test_mse", "N/A"),
                    "Test R¬≤": selected_run.data.metrics.get("test_r2", "N/A"),
                    "Test Accuracy": selected_run.data.metrics.get("test_accuracy", "N/A")
                }
                st.json(metrics)
    
                # 5) N√∫t b·∫•m m·ªü MLflow UI
                st.subheader("Truy c·∫≠p MLflow UI")
                mlflow_url = "https://dagshub.com/Dung2204/HMVPython.mlflow"
                if st.button("M·ªü MLflow UI"):
                    st.markdown(f'**[Click ƒë·ªÉ m·ªü MLflow UI]({mlflow_url})**')
            else:
                st.info("Ch∆∞a c√≥ Run n√†o ƒë∆∞·ª£c log. Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc.")
    
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi MLflow: {e}")

if __name__ == "__main__":
    run_LinearRegression_app()


    # cd "c:/Users/Dell/OneDrive/Pictures/Documents/Code/python/OpenCV/HMVPYTHON/App" 
